% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sets.R
\name{mutually_exclusive}
\alias{mutually_exclusive}
\title{Checks if the passed values are mutually exclusive.}
\usage{
mutually_exclusive(..., allow_all_null = TRUE)
}
\arguments{
\item{...}{the various values}

\item{allow_all_null}{If TRUE, then the test will succeed if all values
are NULL. If FALSE, it will fail.}
}
\description{
Checks if the passed values are mutually exclusive, that is, if
one of the passed values has a non-NULL value, all the others
_must_ be NULL.
If all options are NULL, by default this test passes. Setting
allow_all_null = FALSE changes this behavior to failure. Setting it to
FALSE basically ensures that exactly one of the values is not NULL.

This test is generally useful if two or more parameters in a routine are
technically incompatible with each other, and you want the user to know
the passed parameters in that combination don't make any sense.
}
\examples{
\dontrun{
# For assertion
assertthat::assert_that(
  qscheck::mutually_exclusive(parameter1, parameter2, parameter3)
)
# For check
if (
  qscheck::mutually_exclusive(parameter1, parameter2, parameter3)
) {}
}

}
\concept{set}
